import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:intl/intl.dart';
import '../providers/theme_provider.dart';
import '../providers/api_provider.dart';
import '../widgets/month_filter.dart';
import '../widgets/app_bar.dart';
import '../widgets/overview_card.dart';
import '../widgets/snackbar_helper.dart';
import 'transaction_history_screen.dart';

// Cache formatters for better performance
final _currencyFormatter = NumberFormat.currency(
  symbol: 'UGX ',
  decimalDigits: 0,
);

class DashboardScreen extends ConsumerStatefulWidget {
  const DashboardScreen({super.key});

  @override
  ConsumerState<DashboardScreen> createState() => _DashboardScreenState();
}

class _DashboardScreenState extends ConsumerState<DashboardScreen> {
  DateTime? _selectedMonth = DateTime.now();

  void _refreshData() {
    // Only refresh dashboard-specific data, not the full lists
    // This makes refresh much faster
    final dashboardParams = {
      'month': _selectedMonth?.month,
      'year': _selectedMonth?.year,
    };
    ref.invalidate(dashboardOverviewProvider(dashboardParams));
    ref.invalidate(unpaidCommissionsProvider);
  }

  Future<void> _showMarkCommissionPaidDialog(
    String supplierName,
    int? supplierId,
    int salesCount,
    double totalCommission,
  ) async {
    final colorScheme = Theme.of(context).colorScheme;

    final confirmed = await showDialog<bool>(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Mark Commission Paid'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'Are you sure you want to mark all commissions for $supplierName as paid?',
            ),
            const SizedBox(height: 16),
            Container(
              padding: const EdgeInsets.all(12),
              decoration: BoxDecoration(
                color: colorScheme.surfaceContainerHighest,
                borderRadius: BorderRadius.circular(8),
              ),
              child: Column(
                children: [
                  Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                      Text(
                        'Sales:',
                        style: TextStyle(
                          color: colorScheme.onSurface.withAlpha(179),
                          fontSize: 12,
                        ),
                      ),
                      Text(
                        '$salesCount product(s)',
                        style: const TextStyle(
                          fontWeight: FontWeight.w600,
                          fontSize: 12,
                        ),
                      ),
                    ],
                  ),
                  const SizedBox(height: 8),
                  Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                      Text(
                        'Total Commission:',
                        style: TextStyle(
                          color: colorScheme.onSurface.withAlpha(179),
                          fontSize: 12,
                        ),
                      ),
                      Text(
                        _currencyFormatter.format(totalCommission),
                        style: TextStyle(
                          fontWeight: FontWeight.bold,
                          fontSize: 14,
                          color: colorScheme.primary,
                        ),
                      ),
                    ],
                  ),
                ],
              ),
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context, false),
            child: const Text('Cancel'),
          ),
          ElevatedButton(
            onPressed: () => Navigator.pop(context, true),
            child: const Text('Mark as Paid'),
          ),
        ],
      ),
    );

    if (confirmed == true && supplierId != null) {
      await _markSupplierCommissionsPaid(supplierId, supplierName);
    }
  }

  Future<void> _markSupplierCommissionsPaid(
    int supplierId,
    String supplierName,
  ) async {
    try {
      // Show loading indicator
      if (!mounted) return;
      SnackbarHelper.showInfo(
        context,
        'Marking commissions as paid for $supplierName...',
      );

      // Get unpaid sales for this supplier
      final apiService = ref.read(apiServiceProvider);
      final sales = await apiService.getSalesWithFilters(
        supplierId: supplierId,
        commissionPaid: false,
      );

      // Mark each sale's commission as paid
      for (final sale in sales) {
        await apiService.markCommissionPaid(sale.id);
      }

      // Refresh data
      _refreshData();

      if (!mounted) return;
      SnackbarHelper.showSuccess(
        context,
        'Successfully marked ${sales.length} commission(s) as paid for $supplierName',
      );
    } catch (error) {
      if (!mounted) return;
      SnackbarHelper.showError(context, error);
    }
  }

  @override
  Widget build(BuildContext context) {
    ref.watch(themeProvider);
    final colorScheme = Theme.of(context).colorScheme;

    // Enhanced dashboard data using new API - no need to load full lists
    final dashboardParams = {
      'month': _selectedMonth?.month,
      'year': _selectedMonth?.year,
    };
    final dashboardAsync = ref.watch(
      dashboardOverviewProvider(dashboardParams),
    );
    final unpaidCommissionsAsync = ref.watch(unpaidCommissionsProvider);

    return Scaffold(
      backgroundColor: colorScheme.surface,
      appBar: const CustomAppBar(title: 'Dashboard', showBackButton: false),
      body: SafeArea(
        child: RefreshIndicator(
          onRefresh: () async {
            _refreshData();
          },
          child: SingleChildScrollView(
            physics: const AlwaysScrollableScrollPhysics(),
            padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 24),
            child: Column(
              children: [
                _buildSummaryCards(dashboardAsync),
                const SizedBox(height: 32),
                _buildUnpaidCommissionsSection(unpaidCommissionsAsync),
                const SizedBox(height: 32),
                _buildHistorySection(),
              ],
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildSummaryCards(
    AsyncValue<Map<String, dynamic>> dashboardAsync,
  ) {
    final colorScheme = Theme.of(context).colorScheme;

    // Use enhanced dashboard data - much faster than loading all records
    double totalSales = 0.0;
    double totalExpenses = 0.0;
    double totalCommission = 0.0;
    int totalProducts = 0;

    dashboardAsync.whenData((dashboardData) {
      totalSales = (dashboardData['total_sales'] ?? 0.0).toDouble();
      totalExpenses = (dashboardData['total_expenses'] ?? 0.0).toDouble();
      totalCommission = (dashboardData['commission_paid'] ?? 0.0).toDouble();
      totalProducts = (dashboardData['total_products'] ?? 0).toInt();
    });

    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Row(
          mainAxisAlignment: MainAxisAlignment.spaceBetween,
          children: [
            Text(
              'Overview',
              style: Theme.of(context).textTheme.titleMedium?.copyWith(
                    fontWeight: FontWeight.w600,
                    color: colorScheme.primary,
                    fontSize: 14,
                  ),
            ),
            MonthFilter(
              selectedMonth: _selectedMonth,
              onMonthChanged: (date) {
                setState(() {
                  _selectedMonth = date;
                });
              },
            ),
          ],
        ),
        const SizedBox(height: 16),
        GridView.count(
          crossAxisCount: 2,
          shrinkWrap: true,
          physics: const NeverScrollableScrollPhysics(),
          crossAxisSpacing: 16,
          mainAxisSpacing: 16,
          childAspectRatio: 1.4,
          children: [
            OverviewCard(
              title: 'Total Sales',
              amount: totalSales,
              icon: Icons.trending_up_rounded,
              color: colorScheme.primary,
            ),
            OverviewCard(
              title: 'Total Expenses',
              amount: totalExpenses,
              icon: Icons.trending_down_rounded,
              color: colorScheme.error,
            ),
            OverviewCard(
              title: 'Paid Commission',
              amount: totalCommission,
              icon: Icons.account_balance_rounded,
              color: colorScheme.tertiary,
            ),
            OverviewCard(
              title: 'Total Products',
              amount: totalProducts.toDouble(),
              icon: Icons.inventory_2_rounded,
              color: colorScheme.secondary,
              isCount: true,
            ),
          ],
        ),
        // Unpaid commissions are now shown in a separate section below
      ],
    );
  }

  Widget _buildHistorySection() {
    final colorScheme = Theme.of(context).colorScheme;

    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          'Quick Access',
          style: Theme.of(context).textTheme.titleMedium?.copyWith(
                fontWeight: FontWeight.w600,
                color: colorScheme.primary,
                fontSize: 14,
              ),
        ),
        const SizedBox(height: 16),
        Container(
          decoration: BoxDecoration(
            color: colorScheme.surfaceContainerHighest,
            borderRadius: BorderRadius.circular(20),
            border: Border.all(
              color: colorScheme.outline.withAlpha(25),
              width: 1,
            ),
          ),
          child: Column(
            children: [
              _buildHistoryTile(
                'Sales History',
                null, // Don't show count to avoid loading all data
                colorScheme.primary,
                Icons.trending_up_rounded,
                () {
                  Navigator.push(
                    context,
                    MaterialPageRoute(
                      builder: (context) => const TransactionHistoryScreen(
                        initialType: TransactionType.sales,
                      ),
                    ),
                  );
                },
              ),
              Divider(color: colorScheme.outline.withAlpha(25), height: 1),
              _buildHistoryTile(
                'Expenses History',
                null, // Don't show count to avoid loading all data
                colorScheme.error,
                Icons.trending_down_rounded,
                () {
                  Navigator.push(
                    context,
                    MaterialPageRoute(
                      builder: (context) => const TransactionHistoryScreen(
                        initialType: TransactionType.expenses,
                      ),
                    ),
                  );
                },
              ),
            ],
          ),
        ),
      ],
    );
  }

  Widget _buildHistoryTile(
    String title,
    int? count, // Made optional to avoid loading all data
    Color color,
    IconData icon,
    VoidCallback onTap,
  ) {
    final colorScheme = Theme.of(context).colorScheme;
    return InkWell(
      onTap: onTap,
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Row(
          children: [
            Container(
              padding: const EdgeInsets.all(8),
              decoration: BoxDecoration(
                color: color.withAlpha(25),
                borderRadius: BorderRadius.circular(12),
              ),
              child: Icon(icon, color: color),
            ),
            const SizedBox(width: 16),
            Expanded(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    title,
                    style: TextStyle(
                      fontSize: 13,
                      fontWeight: FontWeight.w600,
                      color: colorScheme.onSurface,
                    ),
                  ),
                  if (count != null) const SizedBox(height: 4),
                  if (count != null)
                    Text(
                      '$count transactions',
                      style: TextStyle(
                        color: colorScheme.onSurface.withAlpha(179),
                        fontSize: 11,
                      ),
                    ),
                ],
              ),
            ),
            Icon(
              Icons.chevron_right_rounded,
              color: colorScheme.onSurface.withAlpha(179),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildUnpaidCommissionsSection(
    AsyncValue<Map<String, dynamic>> unpaidCommissionsAsync,
  ) {
    final colorScheme = Theme.of(context).colorScheme;

    return unpaidCommissionsAsync.when(
      data: (unpaidData) {
        // Check if there are any unpaid commissions
        final hasUnpaid = unpaidData['has_unpaid'] ?? false;
        if (!hasUnpaid) return const SizedBox.shrink();

        final totalUnpaid = (unpaidData['total_unpaid'] ?? 0.0).toDouble();
        final List unpaidCommissions = unpaidData['unpaid_commissions'] ?? [];

        if (unpaidCommissions.isEmpty) return const SizedBox.shrink();

        return Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Text(
                  'Unpaid Commissions',
                  style: Theme.of(context).textTheme.titleMedium?.copyWith(
                        fontWeight: FontWeight.w600,
                        color: colorScheme.primary,
                        fontSize: 14,
                      ),
                ),
                Container(
                  padding: const EdgeInsets.symmetric(
                    horizontal: 12,
                    vertical: 6,
                  ),
                  decoration: BoxDecoration(
                    color: colorScheme.errorContainer,
                    borderRadius: BorderRadius.circular(16),
                  ),
                  child: Text(
                    _currencyFormatter.format(totalUnpaid),
                    style: TextStyle(
                      color: colorScheme.onErrorContainer,
                      fontWeight: FontWeight.bold,
                      fontSize: 11,
                    ),
                  ),
                ),
              ],
            ),
            const SizedBox(height: 16),
            Container(
              decoration: BoxDecoration(
                color: colorScheme.surfaceContainerHighest,
                borderRadius: BorderRadius.circular(20),
                border: Border.all(
                  color: colorScheme.outline.withAlpha(25),
                  width: 1,
                ),
              ),
              child: ListView.separated(
                shrinkWrap: true,
                physics: const NeverScrollableScrollPhysics(),
                itemCount: unpaidCommissions.length,
                separatorBuilder: (context, index) => Divider(
                  color: colorScheme.outline.withAlpha(25),
                  height: 1,
                ),
                itemBuilder: (context, index) {
                  final commission = unpaidCommissions[index];
                  final supplierName =
                      commission['supplier_name'] ?? 'Unknown Supplier';
                  final supplierId = commission['supplier_id'];
                  final totalCommission =
                      (commission['total_commission'] ?? 0.0).toDouble();
                  final salesCount = commission['sales_count'] ?? 0;

                  return RepaintBoundary(
                    child: ListTile(
                      onTap: () => _showMarkCommissionPaidDialog(
                        supplierName,
                        supplierId,
                        salesCount,
                        totalCommission,
                      ),
                      leading: Container(
                        padding: const EdgeInsets.all(8),
                        decoration: BoxDecoration(
                          color: colorScheme.error.withAlpha(25),
                          borderRadius: BorderRadius.circular(12),
                        ),
                        child: Icon(
                          Icons.account_balance_wallet,
                          color: colorScheme.error,
                        ),
                      ),
                      title: Text(
                        supplierName,
                        style: TextStyle(
                          fontWeight: FontWeight.w600,
                          color: colorScheme.onSurface,
                          fontSize: 13,
                        ),
                      ),
                      subtitle: Text(
                        '$salesCount unpaid product(s)',
                        style: TextStyle(
                          color: colorScheme.onSurface.withAlpha(179),
                          fontSize: 11,
                        ),
                      ),
                      trailing: Row(
                        mainAxisSize: MainAxisSize.min,
                        children: [
                          Text(
                            _currencyFormatter.format(totalCommission),
                            style: TextStyle(
                              fontWeight: FontWeight.w600,
                              color: colorScheme.error,
                              fontSize: 13,
                            ),
                          ),
                          const SizedBox(width: 8),
                          Icon(
                            Icons.check_circle_outline,
                            color: colorScheme.primary,
                            size: 20,
                          ),
                        ],
                      ),
                    ),
                  );
                },
              ),
            ),
          ],
        );
      },
      loading: () => const SizedBox.shrink(),
      error: (error, stack) => const SizedBox.shrink(),
    );
  }
}
